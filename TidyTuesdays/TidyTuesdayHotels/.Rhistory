n = count(ArrivalDateMonthNum),
d8 = d8)
ols.1 <- lm(Showed ~ Resort + StaysInWeekNights + StaysInWeekendNights + Adults + Children + Babies + PreviousBookingsNotCanceled + longplan + shortplan,data = fullH)
summary(ols.1)
ols.1 <- lm(Showed ~ Resort + staylength + StaysInWeekendNights + Adults + Children + Babies + PreviousBookingsNotCanceled + longplan + shortplan,data = fullH)
summary(ols.1)
#loading data
library(here)
library(haven)
#data wrangling
library(dplyr)
library(tidyr)
library(knitr)
library(lubridate)
#data presentation
library(ggplot2)
library(jtools)
library(grid)
library(gridExtra)
library(broom)
#regression tools
library(plm)
library(ivreg)
library(multiwayvcov)
library(fixest)
library(car)
#loading data
library(here)
library(haven)
#data wrangling
library(dplyr)
library(tidyr)
library(knitr)
library(lubridate)
#data presentation
library(ggplot2)
library(jtools)
library(grid)
library(gridExtra)
library(broom)
#regression tools
library(plm)
library(ivreg)
library(multiwayvcov)
library(fixest)
library(car)
# Load in Data
H1 = read.csv(file = 'Data/H1.csv')
H2 = read.csv(file = 'Data/H2.csv')
# merge data
H1$Resort <- TRUE
H2$Resort <- FALSE
fullH = merge(H1,H2,all = TRUE)
fullH <- na.omit(fullH)
#create outcome variable for regressions
fullH$Showed <- ifelse(
fullH$ReservationStatus =="Check-Out",
1, 0)
fullH$Resort <- ifelse(
fullH$Resort == TRUE,
1,0)
#create a variable that determines if trip was planned ahead or split decision
fullH$shortplan <- ifelse(
fullH$LeadTime < 12,
1,0)
fullH$longplan <- ifelse(
fullH$LeadTime >= 21,
1,0)
#create time spent variable
fullH$staylength <- fullH$StaysInWeekendNights + fullH$StaysInWeekNights
##create date variable
#manage month nd day values
fullH$ArrivalDateMonthNum = match(fullH$ArrivalDateMonth,month.name)
fullH$ArrivalDateMonthNum <- ifelse(
nchar(fullH$ArrivalDateMonthNum)!=2,
paste0('0',fullH$ArrivalDateMonthNum),fullH$ArrivalDateMonthNum)
fullH$ArrivalDateDayOfMonth <- ifelse(
nchar(fullH$ArrivalDateDayOfMonth)!=2,
paste0('0',fullH$ArrivalDateDayOfMonth),fullH$ArrivalDateDayOfMonth)
#combine variables
fullH$d8 <- paste(fullH$ArrivalDateYear,fullH$ArrivalDateMonthNum)
fullH$d8 <- paste(fullH$d8, fullH$ArrivalDateDayOfMonth)
#format for lubridate
fullH$d8 = gsub(" ","",fullH$d8)
fullH$d8 <- as.integer(fullH$d8)
#ymd to format
fullH$d8 <- ymd(fullH$d8)
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
stat_summary(
# set geometry to line
geom = 'line')
balancechk <- fullH %>%
#group the data
group_by(d8) %>%
#summarize
summarize(
n = n(ArrivalDateMonthNum),
d8 = d8)
ols.1 <- lm(Showed ~ Resort + staylength + StaysInWeekendNights + Adults + Children + Babies + PreviousBookingsNotCanceled + longplan + shortplan,data = fullH)
summary(ols.1)
# Groupby count of single column
aggregate(fullH$ArrivalDateMonthNum, by=list(fullH$d8), FUN=length)
#  ggplot(aes(x=d8,y=emp2020)) +
#  geom_point()
# Groupby count of single column
dta <- fullH %>%
group_by(d8) %>%
summarise(count_ArrivalDateMonthNumsales = n())
#  aggregate(fullH$ArrivalDateMonthNum, by=list(fullH$d8), FUN=length)
#rename variable
#   dta$bookings <- dta$x
#graph
#  dta %>%
#  ggplot(aes(x=d8,y=emp2020)) +
#  geom_point()
View(dta)
# Groupby count of single column
dta <- fullH %>%
group_by(d8) %>%
summarise(count_ArrivalDateMonthNumsales = n())
#rename variable
dta$bookings <- dta$count_ArrivalDateMonthNumsales
#graph
dta %>%
ggplot(aes(x=d8,y=bookings)) +
geom_point()
# Groupby count of single column
dta <- fullH %>%
group_by(d8) %>%
summarise(count_ArrivalDateMonthNumsales = n())
#rename variable
dta$bookings <- dta$count_ArrivalDateMonthNumsales
#graph
dta %>%
ggplot(aes(x=d8,
y=bookings,
colour = factor(Resort))) +
geom_point()
# Groupby count of single column
dta <- fullH %>%
group_by(d8) %>%
summarise(count_ArrivalDateMonthNumsales = n())
#rename variable
dta$bookings <- dta$count_ArrivalDateMonthNumsales
#graph
dta %>%
ggplot(aes(x=d8,
y=bookings)) +
geom_point()
#loading data
library(here)
library(haven)
#data wrangling
library(dplyr)
library(tidyr)
library(knitr)
library(lubridate)
#data presentation
library(ggplot2)
library(jtools)
library(grid)
library(gridExtra)
library(broom)
#regression tools
library(plm)
library(ivreg)
library(multiwayvcov)
library(fixest)
library(car)
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
stat_summary(
# set geometry to point
geom = 'point')
#loading data
library(here)
library(haven)
#data wrangling
library(dplyr)
library(tidyr)
library(knitr)
library(lubridate)
#data presentation
library(ggplot2)
library(jtools)
library(grid)
library(gridExtra)
library(broom)
#regression tools
library(plm)
library(ivreg)
library(multiwayvcov)
library(fixest)
library(car)
# Load in Data
H1 = read.csv(file = 'Data/H1.csv')
H2 = read.csv(file = 'Data/H2.csv')
# merge data
H1$Resort <- TRUE
H2$Resort <- FALSE
fullH = merge(H1,H2,all = TRUE)
fullH <- na.omit(fullH)
#create outcome variable for regressions
fullH$Showed <- ifelse(
fullH$ReservationStatus =="Check-Out",
1, 0)
fullH$Resort <- ifelse(
fullH$Resort == TRUE,
1,0)
#create a variable that determines if trip was planned ahead or split decision
fullH$shortplan <- ifelse(
fullH$LeadTime < 12,
1,0)
fullH$longplan <- ifelse(
fullH$LeadTime >= 21,
1,0)
#create time spent variable
fullH$staylength <- fullH$StaysInWeekendNights + fullH$StaysInWeekNights
##create date variable
#manage month nd day values
fullH$ArrivalDateMonthNum = match(fullH$ArrivalDateMonth,month.name)
fullH$ArrivalDateMonthNum <- ifelse(
nchar(fullH$ArrivalDateMonthNum)!=2,
paste0('0',fullH$ArrivalDateMonthNum),fullH$ArrivalDateMonthNum)
fullH$ArrivalDateDayOfMonth <- ifelse(
nchar(fullH$ArrivalDateDayOfMonth)!=2,
paste0('0',fullH$ArrivalDateDayOfMonth),fullH$ArrivalDateDayOfMonth)
#combine variables
fullH$d8 <- paste(fullH$ArrivalDateYear,fullH$ArrivalDateMonthNum)
fullH$d8 <- paste(fullH$d8, fullH$ArrivalDateDayOfMonth)
#format for lubridate
fullH$d8 = gsub(" ","",fullH$d8)
fullH$d8 <- as.integer(fullH$d8)
#ymd to format
fullH$d8 <- ymd(fullH$d8)
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
geom_point()
#  stat_summary(
# set geometry to point
#    geom = 'point')
# Groupby count of single column
dta <- fullH %>%
group_by(d8) %>%
summarise(count_ArrivalDateMonthNumsales = n())
#rename variable
dta$bookings <- dta$count_ArrivalDateMonthNumsales
#graph
dta %>%
ggplot(aes(x=d8,
y=bookings)) +
geom_point()
ols.1 <- lm(Showed ~ Resort + staylength + StaysInWeekendNights + Adults + Children + Babies + PreviousBookingsNotCanceled + longplan + shortplan,data = fullH)
summary(ols.1)
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
#  geom_point()
stat_summary(
# set geometry to point
geom = 'point')
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
#  geom_point()
stat_summary_bin(
mapping = d8
# set geometry to point
geom = 'point')
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
#  geom_point()
stat_summary_bin(
# set geometry to point
geom = 'point')
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
#  geom_point()
stat_summary_bin(
# set geometry to point
geom = 'point')
#loading data
library(here)
library(haven)
#data wrangling
library(dplyr)
library(tidyr)
library(knitr)
library(lubridate)
#data presentation
library(ggplot2)
library(jtools)
library(grid)
library(gridExtra)
library(broom)
#regression tools
library(plm)
library(ivreg)
library(multiwayvcov)
library(fixest)
library(car)
# Load in Data
H1 = read.csv(file = 'Data/H1.csv')
H2 = read.csv(file = 'Data/H2.csv')
# merge data
H1$Resort <- TRUE
H2$Resort <- FALSE
fullH = merge(H1,H2,all = TRUE)
fullH <- na.omit(fullH)
#create outcome variable for regressions
fullH$Showed <- ifelse(
fullH$ReservationStatus =="Check-Out",
1, 0)
fullH$Resort <- ifelse(
fullH$Resort == TRUE,
1,0)
#create a variable that determines if trip was planned ahead or split decision
fullH$shortplan <- ifelse(
fullH$LeadTime < 12,
1,0)
fullH$longplan <- ifelse(
fullH$LeadTime >= 21,
1,0)
#create time spent variable
fullH$staylength <- fullH$StaysInWeekendNights + fullH$StaysInWeekNights
##create date variable
#manage month nd day values
fullH$ArrivalDateMonthNum = match(fullH$ArrivalDateMonth,month.name)
fullH$ArrivalDateMonthNum <- ifelse(
nchar(fullH$ArrivalDateMonthNum)!=2,
paste0('0',fullH$ArrivalDateMonthNum),fullH$ArrivalDateMonthNum)
fullH$ArrivalDateDayOfMonth <- ifelse(
nchar(fullH$ArrivalDateDayOfMonth)!=2,
paste0('0',fullH$ArrivalDateDayOfMonth),fullH$ArrivalDateDayOfMonth)
#combine variables
fullH$d8 <- paste(fullH$ArrivalDateYear,fullH$ArrivalDateMonthNum)
fullH$d8 <- paste(fullH$d8, fullH$ArrivalDateDayOfMonth)
#format for lubridate
fullH$d8 = gsub(" ","",fullH$d8)
fullH$d8 <- as.integer(fullH$d8)
#ymd to format
fullH$d8 <- ymd(fullH$d8)
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
#  geom_point()
stat_summary_bin(
# set geometry to point
geom = 'point')
# Groupby count of single column
dta <- fullH %>%
group_by(d8) %>%
summarise(count_ArrivalDateMonthNumsales = n())
#rename variable
dta$bookings <- dta$count_ArrivalDateMonthNumsales
#graph
dta %>%
ggplot(aes(x=d8,
y=bookings)) +
geom_point()
ols.1 <- lm(Showed ~ Resort + staylength + StaysInWeekendNights + Adults + Children + Babies + PreviousBookingsNotCanceled + longplan + shortplan,data = fullH)
summary(ols.1)
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
geom_point()
#  stat_summary_bin(
# set geometry to point
#    geom = 'point')
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
#  geom_point()
stat_summary(
# set geometry to point
geom = 'point')
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
#  geom_point()
stat_summary(
# set geometry to point
geom = 'bar')
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
geom_bar()
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
#  geom_point()
stat_summary(
# set geometry to point
geom = 'point')
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
#  geom_point()
stat_summary(
# set geometry to point
fun = 'mean',
geom = 'point')
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
#  geom_point()
stat_summary(
# set geometry to point
fun = 'mean',
geom = 'bar')
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
#  geom_point()
stat_summary(
# set geometry to point
fun = 'mean',
geom = 'point')
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
#  geom_point()
stat_summary(
# set geometry to point
fun.y = 'mean',
geom = 'point')
ggplot(
data = fullH,
# set aesthetic information
mapping = aes(
x=d8,
y=Showed,
colour = factor(Resort))) +
#  geom_point()
stat_summary(
# set geometry to point
fun = 'mean',
geom = 'point')
