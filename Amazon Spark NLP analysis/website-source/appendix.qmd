# Appendix 

## Appendix I : Confusion Matrices of Controversiality Predicting Models 

```{python}
#| echo: false
#| warning: false 

import ipywidgets as widgets
import IPython.display as display
from IPython.display import HTML
import plotly.express as px 
import pandas as pd
import json

## Read images from file 
img1 = open('../data/plots/NaiveBayes-ConfusionMatrix.png', 'rb').read()
img2 = open('../data/plots/LogisticM-ConfusionMatrix.png', 'rb').read()
img3 = open('../data/plots/LinearSVC-ConfusionMatrix.png', 'rb').read()


wi1 = widgets.Image(value=img1, format='png', width=500, height=500)
wi2 = widgets.Image(value=img2, format='png', width=500, height=500)
wi3 = widgets.Image(value=img3, format='png', width=500, height=500)
## VBox widgets
vbox_1 = widgets.VBox([wi1, wi2, wi3])
## Display
display.display(vbox_1)



```


## Appendix II : NER Tagging of Top Submissions and Comments 

```{python}
#| echo: false
#| warning: false 

## Read images from file 
img1 = open('../data/plots/NER-Viz-sub.png', 'rb').read()
img2 = open('../data/plots/NER-VIZ-com.png', 'rb').read()

wi1 = widgets.Image(value=img1, format='png', width=1000, height=900)
wi2 = widgets.Image(value=img2, format='png', width=1000, height=900)

## VBox widgets
vbox_1 = widgets.VBox([wi1, wi2])
## Display
display.display(vbox_1)


```


```{python}
#| echo: false
#| warning: false 

## load data
all_country = json.load(open("../data/csv/all_country.geojson","r"))
merge9 = pd.read_csv("../data/csv/occurences-viz-data.csv")

# prepare for plotting
country_id_map = {}
for feature in all_country["features"]:
    feature["properties"]['name']= coco.convert(names=feature["properties"]['name'], to='name_short')
    feature["id"] = feature["properties"]['name']
    country_id_map[feature["properties"]['name']] = feature["id"]

def get_map_id(all_country_geo):
    country_id0_map = {}
    for feature in all_country_geo["features"]:
        feature["properties"]['name']= coco.convert(names=feature["properties"]['name'], to='name_short')
        feature["id"] = feature["properties"]['name']
        country_id0_map[feature["properties"]['name']] = feature["id"]
    return country_id0_map

country_id_map = get_map_id(all_country)

fig = px.choropleth_mapbox(merge9,
                    locations = "id",
                    mapbox_style="carto-positron",
                    geojson = all_country,
                    color="log_count",
                   hover_name = "Country Name",
                   #hover_data = merge9.columns,
                    hover_data = {"id": False,
                                  "log_count": False,
                                "Total Occurences": True},
                    color_continuous_scale="magma",
                     zoom= 0.57,opacity = 0.8,
                    center = {"lat": 34.55,"lon":18.04},
                    title = "Country Occurences in WorldNews Subreddit",
                 labels={'log_count': 'Country Occurences'})

fig.update_layout(margin={"r":0,"t":40,"l":0,"b":0})

fig.update_layout(hovermode='x unified', legend=dict(title= None),
                  hoverlabel=dict(bgcolor='rgba(255,255,255,0.75)',
                  font=dict(color='black')))


fig.show()

```